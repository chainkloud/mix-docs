//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String'];
  path: Scalars['String'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  doc: Doc;
  docConnection: DocConnection;
  dropdowns: Dropdowns;
  dropdownsConnection: DropdownsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryDocArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryDocConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocFilter>;
};


export type QueryDropdownsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryDropdownsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DropdownsFilter>;
};

export type DocumentFilter = {
  doc?: InputMaybe<DocFilter>;
  dropdowns?: InputMaybe<DropdownsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = Doc | Dropdowns | Folder;

export type Doc = Node & Document & {
  __typename?: 'Doc';
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  sidebar_position?: Maybe<Scalars['Float']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  eq?: InputMaybe<Scalars['Float']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type DocBodyAdmonitionFilter = {
  type?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  children?: InputMaybe<RichTextFilter>;
};

export type DocBodyDetailsFilter = {
  summary?: InputMaybe<StringFilter>;
  children?: InputMaybe<RichTextFilter>;
};

export type DocBodyCodeBlockFilter = {
  title?: InputMaybe<StringFilter>;
  language?: InputMaybe<StringFilter>;
  children?: InputMaybe<RichTextFilter>;
};

export type DocBodyTabsChildrenTabItemFilter = {
  label?: InputMaybe<StringFilter>;
  value?: InputMaybe<StringFilter>;
  children?: InputMaybe<StringFilter>;
};

export type DocBodyTabsChildrenFilter = {
  TabItem?: InputMaybe<DocBodyTabsChildrenTabItemFilter>;
};

export type DocBodyTabsFilter = {
  children?: InputMaybe<DocBodyTabsChildrenFilter>;
};

export type DocBodyDocCardListFilter = {
  title?: InputMaybe<StringFilter>;
};

export type DocBodyFilter = {
  Admonition?: InputMaybe<DocBodyAdmonitionFilter>;
  Details?: InputMaybe<DocBodyDetailsFilter>;
  CodeBlock?: InputMaybe<DocBodyCodeBlockFilter>;
  Tabs?: InputMaybe<DocBodyTabsFilter>;
  DocCardList?: InputMaybe<DocBodyDocCardListFilter>;
};

export type DocFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  sidebar_position?: InputMaybe<NumberFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<DocBodyFilter>;
};

export type DocConnectionEdges = {
  __typename?: 'DocConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Doc>;
};

export type DocConnection = Connection & {
  __typename?: 'DocConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocConnectionEdges>>>;
};

export type Dropdowns = Node & Document & {
  __typename?: 'Dropdowns';
  label: Scalars['String'];
  position?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type DropdownsFilter = {
  label?: InputMaybe<StringFilter>;
  position?: InputMaybe<NumberFilter>;
};

export type DropdownsConnectionEdges = {
  __typename?: 'DropdownsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Dropdowns>;
};

export type DropdownsConnection = Connection & {
  __typename?: 'DropdownsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DropdownsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateDoc: Doc;
  createDoc: Doc;
  updateDropdowns: Dropdowns;
  createDropdowns: Dropdowns;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateDocArgs = {
  relativePath: Scalars['String'];
  params: DocMutation;
};


export type MutationCreateDocArgs = {
  relativePath: Scalars['String'];
  params: DocMutation;
};


export type MutationUpdateDropdownsArgs = {
  relativePath: Scalars['String'];
  params: DropdownsMutation;
};


export type MutationCreateDropdownsArgs = {
  relativePath: Scalars['String'];
  params: DropdownsMutation;
};

export type DocumentUpdateMutation = {
  doc?: InputMaybe<DocMutation>;
  dropdowns?: InputMaybe<DropdownsMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  doc?: InputMaybe<DocMutation>;
  dropdowns?: InputMaybe<DropdownsMutation>;
};

export type DocMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  sidebar_position?: InputMaybe<Scalars['Float']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type DropdownsMutation = {
  label?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['Float']>;
};

export type DocPartsFragment = { __typename?: 'Doc', title: string, description?: string | null, sidebar_position?: number | null, tags?: Array<string | null> | null, body?: any | null };

export type DropdownsPartsFragment = { __typename?: 'Dropdowns', label: string, position?: number | null };

export type DocQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type DocQuery = { __typename?: 'Query', doc: { __typename?: 'Doc', id: string, title: string, description?: string | null, sidebar_position?: number | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type DocConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocFilter>;
}>;


export type DocConnectionQuery = { __typename?: 'Query', docConnection: { __typename?: 'DocConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'DocConnectionEdges', cursor: string, node?: { __typename?: 'Doc', id: string, title: string, description?: string | null, sidebar_position?: number | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type DropdownsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type DropdownsQuery = { __typename?: 'Query', dropdowns: { __typename?: 'Dropdowns', id: string, label: string, position?: number | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type DropdownsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DropdownsFilter>;
}>;


export type DropdownsConnectionQuery = { __typename?: 'Query', dropdownsConnection: { __typename?: 'DropdownsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'DropdownsConnectionEdges', cursor: string, node?: { __typename?: 'Dropdowns', id: string, label: string, position?: number | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const DocPartsFragmentDoc = gql`
    fragment DocParts on Doc {
  title
  description
  sidebar_position
  tags
  body
}
    `;
export const DropdownsPartsFragmentDoc = gql`
    fragment DropdownsParts on Dropdowns {
  label
  position
}
    `;
export const DocDocument = gql`
    query doc($relativePath: String!) {
  doc(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...DocParts
  }
}
    ${DocPartsFragmentDoc}`;
export const DocConnectionDocument = gql`
    query docConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: DocFilter) {
  docConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...DocParts
      }
    }
  }
}
    ${DocPartsFragmentDoc}`;
export const DropdownsDocument = gql`
    query dropdowns($relativePath: String!) {
  dropdowns(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...DropdownsParts
  }
}
    ${DropdownsPartsFragmentDoc}`;
export const DropdownsConnectionDocument = gql`
    query dropdownsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: DropdownsFilter) {
  dropdownsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...DropdownsParts
      }
    }
  }
}
    ${DropdownsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      doc(variables: DocQueryVariables, options?: C): Promise<{data: DocQuery, variables: DocQueryVariables, query: string}> {
        return requester<{data: DocQuery, variables: DocQueryVariables, query: string}, DocQueryVariables>(DocDocument, variables, options);
      },
    docConnection(variables?: DocConnectionQueryVariables, options?: C): Promise<{data: DocConnectionQuery, variables: DocConnectionQueryVariables, query: string}> {
        return requester<{data: DocConnectionQuery, variables: DocConnectionQueryVariables, query: string}, DocConnectionQueryVariables>(DocConnectionDocument, variables, options);
      },
    dropdowns(variables: DropdownsQueryVariables, options?: C): Promise<{data: DropdownsQuery, variables: DropdownsQueryVariables, query: string}> {
        return requester<{data: DropdownsQuery, variables: DropdownsQueryVariables, query: string}, DropdownsQueryVariables>(DropdownsDocument, variables, options);
      },
    dropdownsConnection(variables?: DropdownsConnectionQueryVariables, options?: C): Promise<{data: DropdownsConnectionQuery, variables: DropdownsConnectionQueryVariables, query: string}> {
        return requester<{data: DropdownsConnectionQuery, variables: DropdownsConnectionQueryVariables, query: string}, DropdownsConnectionQueryVariables>(DropdownsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "https://content.tinajs.io/1.4/content/36bbcf7c-e3ba-430e-b4d0-7fdca247925b/github/master", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  